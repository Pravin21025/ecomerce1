// src/App.js

import React, { useState, useEffect, useCallback } from 'react';
import './App.css';

const App = () => {
  const [movies, setMovies] = useState([]);
  const [retrying, setRetrying] = useState(false);
  const [newMovie, setNewMovie] = useState({ title: '', year: '' });

  // Memoized fetchDataWithRetry function
  const fetchDataWithRetry = useCallback(async () => {
    let maxRetries = 5;
    let retryInterval = 5000; // 5 seconds
    let retries = 0;

    setRetrying(true);

    while (retries < maxRetries) {
      try {
        // Simulate an API call with a 50% chance of success
        const isSuccess = Math.random() < 0.5;

        if (isSuccess) {
          // Fetch movies data (replace with actual API call)
          const response = await fetchMovies();
          setMovies(response);
          break;
        } else {
          throw new Error('API call failed.');
        }
      } catch (error) {
        console.error(`Error: ${error.message}`);
        // Retry after a delay
        await new Promise(resolve => setTimeout(resolve, retryInterval));
        retries++;
      }
    }

    setRetrying(false);
  }, []);

  // Memoized fetchMovies function
  const fetchMovies = useCallback(async () => {
    // Replace with actual API call
    // Example: const response = await fetch('https://api.example.com/movies');
    // const data = await response.json();
    // return data;

    // Simulated data for demonstration
    return [
      { id: 1, title: 'Movie 1', year: 2020 },
      { id: 2, title: 'Movie 2', year: 2021 },
      { id: 3, title: 'Movie 3', year: 2019 },
    ];
  }, []);

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewMovie((prev) => ({ ...prev, [name]: value }));
  };

  // Handle form submission
  const handleAddMovie = (e) => {
    e.preventDefault();
    console.log('New Movie Object:', newMovie);
    // You can perform further actions like sending data to the server, etc.
  };

  // Use useEffect to fetch data when the component mounts
  useEffect(() => {
    fetchDataWithRetry();
  }, [fetchDataWithRetry]);

  return (
    <div className="App">
      <div className="form-container">
        <h2>Add Movies</h2>
        <form onSubmit={handleAddMovie}>
          <label>
            Title:
            <input type="text" name="title" value={newMovie.title} onChange={handleInputChange} />
          </label>
          <label>
            Year:
            <input type="text" name="year" value={newMovie.year} onChange={handleInputChange} />
          </label>
          <button type="submit">Add Movie</button>
        </form>
      </div>

      <div className="movies">
        <h2>Movies</h2>
        {movies.map((movie) => (
          <div key={movie.id} className="movie-card">
            <p>{movie.title}</p>
            <p>Year: {movie.year}</p>
          </div>
        ))}
      </div>

      <div className="retry-button" onClick={fetchDataWithRetry}>
        {retrying ? 'Retrying...' : 'Retry'}
      </div>
    </div>
  );
};

export default App;

import React, { useState } from 'react';

const LoginForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleLogin = async () => {
    setLoading(true);

    try {
      const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=YOUR_FIREBASE_API_KEY', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          returnSecureToken: true,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        // Successful login
        console.log('Login successful!');
        console.log('ID Token (JWT):', data.idToken);

        // Store the token in a secure way (e.g., in local storage or a secure cookie)
        // Note: In a real-world scenario, you should handle token storage securely.
        localStorage.setItem('token', data.idToken);
      } else {
        // Handle login failure
        setError('Authentication failed. Please check your credentials.');
      }
    } catch (error) {
      console.error('Error during login:', error);
      setError('An unexpected error occurred.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <input type="text" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
      {loading ? (
        <div className="loader">Loading...</div>
      ) : (
        <button onClick={handleLogin}>Log In</button>
      )}
      {error && <div className="error-message">{error}</div>}
    </div>
  );
};

export default LoginForm;

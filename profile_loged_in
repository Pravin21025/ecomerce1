import { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [token, setToken] = useState(localStorage.getItem('token') || null);

  const login = (newToken) => {
    setToken(newToken);
    localStorage.setItem('token', newToken);
  };

  const logout = () => {
    setToken(null);
    localStorage.removeItem('token');
  };

  return (
    <AuthContext.Provider value={{ token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { AuthProvider } from './AuthContext';
import LoginForm from './LoginForm';
import Profile from './Profile';

const App = () => {
  return (
    <Router>
      <AuthProvider>
        <Switch>
          <Route path="/profile" component={Profile} />
          <Route path="/" component={LoginForm} />
        </Switch>
      </AuthProvider>
    </Router>
  );
};

export default App;

import React from 'react';
import { useAuth } from './AuthContext';

const LoginForm = () => {
  const { token, login, logout } = useAuth();

  const handleLogin = async () => {
    // Perform login logic (similar to previous example)
    // ...

    // Assume successful login, and set the token
    login('your_generated_token'); // Replace with the actual token
  };

  return (
    <div>
      {!token ? (
        // Show login page if not logged in
        <div>
          <h2>Login Page</h2>
          <button onClick={handleLogin}>Log In</button>
        </div>
      ) : (
        // Show profile page if logged in
        <div>
          <h2>Profile Page</h2>
          <button onClick={logout}>Log Out</button>
        </div>
      )}
    </div>
  );
};

export default LoginForm;

import React from 'react';
import { useAuth } from './AuthContext';

const Profile = () => {
  const { token, logout } = useAuth();

  return (
    <div>
      <h2>Profile Page</h2>
      <button onClick={logout}>Log Out</button>
    </div>
  );
};

export default Profile;
